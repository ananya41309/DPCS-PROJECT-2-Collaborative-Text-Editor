import type * as CSS from 'csstype';
import type { DeepPartial } from '@remirror/core-types';
export interface CSSProperties extends CSS.Properties {
    [key: string]: any;
}
/**
 * Create the theme variables from the provided theme.
 *
 * This function can't use anything from `@remirror/core-helpers` due to being
 * used in the `themeStyles` css. Babel can't resolve the imported functions in
 * development.
 */
export declare function createThemeVariables(theme?: RemirrorThemeType): CreateThemeVariablesReturn;
/**
 * Aliased name for the color type. It's just a string.
 */
export type Color = string;
/**
 * A hue is a color split into ten hues.
 */
export type Hue = [Color, Color, Color, Color, Color, Color, Color, Color, Color, Color];
/**
 * The Remirror Theme Type which can be extended by adding properties to the
 * global Remirror.Theme namespace.
 */
export type RemirrorThemeType = DeepPartial<Remirror.Theme>;
/**
 * Get the theme custom property wrapped in a `var`.
 *
 * ```ts
 * import { getThemeVar } from '@remirror/theme';
 * getThemeVar('color', 'primary', 'text') => `var(--rmr-color-primary-text)`
 * ```
 */
export declare function getThemeVar<TKey1 extends keyof Remirror.Theme>(t1: TKey1): string;
export declare function getThemeVar<TKey1 extends keyof Remirror.Theme, TKey2 extends keyof Remirror.Theme[TKey1]>(t1: TKey1, t2: TKey2): string;
export declare function getThemeVar<TKey1 extends keyof Remirror.Theme, TKey2 extends keyof Remirror.Theme[TKey1], TKey3 extends keyof Remirror.Theme[TKey1][TKey2]>(t1: TKey1, t2: TKey2, t3: TKey3): string;
export declare function getThemeVar<TKey1 extends keyof Remirror.Theme, TKey2 extends keyof Remirror.Theme[TKey1], TKey3 extends keyof Remirror.Theme[TKey1][TKey2], TKey4 extends keyof Remirror.Theme[TKey1][TKey2][TKey3]>(t1: TKey1, t2: TKey2, t3: TKey3, t4: TKey4): string;
/**
 * Get the theme custom property wrapped in a `var`.
 *
 * ```ts
 * import { getThemeVarName } from '@remirror/theme';
 * getThemeVarName('color', 'primary', 'text') => `--rmr-color-primary-text`
 * ```
 */
export declare function getThemeVarName<TKey1 extends keyof Remirror.Theme>(t1: TKey1): string;
export declare function getThemeVarName<TKey1 extends keyof Remirror.Theme, TKey2 extends keyof Remirror.Theme[TKey1]>(t1: TKey1, t2: TKey2): string;
export declare function getThemeVarName<TKey1 extends keyof Remirror.Theme, TKey2 extends keyof Remirror.Theme[TKey1], TKey3 extends keyof Remirror.Theme[TKey1][TKey2]>(t1: TKey1, t2: TKey2, t3: TKey3): string;
export declare function getThemeVarName<TKey1 extends keyof Remirror.Theme, TKey2 extends keyof Remirror.Theme[TKey1], TKey3 extends keyof Remirror.Theme[TKey1][TKey2], TKey4 extends keyof Remirror.Theme[TKey1][TKey2][TKey3]>(t1: TKey1, t2: TKey2, t3: TKey3, t4: TKey4): string;
/**
 * The default remirror theme. This can be mutated with the
 * `mutateRemirrorTheme`.
 */
export declare const defaultRemirrorTheme: Remirror.Theme;
export interface CreateThemeVariablesReturn {
    /**
     * A css string of the variables.
     */
    css: string;
    /**
     * A styles object version of the created css.
     */
    styles: CSSProperties;
}
declare global {
    namespace Remirror {
        /**
         * The interface for the remirror theme. It is declared in the global
         * namespace to allow you to extend and update the theme values that can be
         * provided.
         */
        interface Theme {
            color: ThemeColor;
            hue: ThemeHue;
            fontFamily: ThemeFontFamily;
            fontSize: ThemeFontSize;
            fontWeight: ThemeFontWeight;
            space: ThemeSpace;
            lineHeight: ThemeLineHeight;
            letterSpacing: ThemeLetterSpacing;
            radius: ThemeBorderRadius;
            boxShadow: ThemeBoxShadow;
        }
        interface ThemeBoxShadow {
            1: string;
            2: string;
            3: string;
        }
        interface ThemeLineHeight {
            default: string | number;
            heading: string | number;
        }
        interface ThemeLetterSpacing {
            tight: string | number;
            default: string | number;
            loose: string | number;
            wide: string | number;
        }
        interface ThemeBorderRadius {
            border: string | number;
            extra: string | number;
            circle: string | number;
        }
        interface ThemeFontWeight {
            default: string;
            heading: string;
            bold: string;
        }
        interface ThemeFontFamily {
            default: string;
            heading: string;
            mono: string;
        }
        interface ThemeSpace {
            1: string | number;
            2: string | number;
            3: string | number;
            4: string | number;
            5: string | number;
            6: string | number;
            7: string | number;
            8: string | number;
        }
        interface ThemeFontSize {
            0: string | number;
            1: string | number;
            2: string | number;
            3: string | number;
            4: string | number;
            5: string | number;
            6: string | number;
            7: string | number;
            8: string | number;
            default: string | number;
        }
        interface NamedColor {
            foreground: Color;
            background: Color;
            text: Color;
            primary: Color;
            secondary: Color;
            primaryText: Color;
            secondaryText: Color;
            border: Color;
            muted: Color;
            faded: Color;
        }
        interface ThemeColor extends NamedColor {
            shadow1: Color;
            shadow2: Color;
            shadow3: Color;
            backdrop: Color;
            outline: Color;
            active: NamedColor;
            hover: NamedColor;
            /**
             * The configuration for the table.
             */
            table: {
                default: {
                    border: Color;
                    cell: Color;
                    controller: Color;
                };
                selected: {
                    border: Color;
                    cell: Color;
                    controller: Color;
                };
                preselect: {
                    border: Color;
                    cell: Color;
                    controller: Color;
                };
                predelete: {
                    border: Color;
                    cell: Color;
                    controller: Color;
                };
                mark: Color;
            };
        }
        interface ThemeHue {
            gray: Hue;
            red: Hue;
            pink: Hue;
            grape: Hue;
            violet: Hue;
            indigo: Hue;
            blue: Hue;
            cyan: Hue;
            teal: Hue;
            green: Hue;
            lime: Hue;
            yellow: Hue;
            orange: Hue;
        }
    }
}
