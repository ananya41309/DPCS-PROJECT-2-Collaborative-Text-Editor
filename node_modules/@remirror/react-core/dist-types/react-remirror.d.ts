import type { ReactElement, ReactNode } from 'react';
import { AnyExtension, RemirrorManager } from '@remirror/core';
import { I18nProps } from './contexts';
import type { ReactFrameworkProps } from './react-framework';
/**
 * The props for the main `<Remirror />` component.
 */
export interface RemirrorProps<Extension extends AnyExtension = Remirror.Extensions> extends Omit<ReactFrameworkProps<Extension>, 'stringHandler' | 'manager'>, I18nProps {
    /**
     * This manager composes the extensions provided and provides the
     * functionality used throughout the editor.
     *
     * It is overridden here since there was an issue with type inference when
     * using the manager inherited from `ReactFrameworkProps`.
     */
    manager: RemirrorManager<any>;
    /**
     * The optional children which can be passed into the [`Remirror`].
     */
    children?: ReactNode;
    /**
     * Set this to `start` or `end` to automatically render the editor to the dom.
     *
     * When set to `start` the editor will be added before all other child
     * components. If `end` the editable editor will be added after all child
     * components.
     *
     * When no children are provided the editor will automatically be rendered
     * even without this prop being set.
     *
     * `start` is the preferred value since it helps avoid some of the issues that
     * can arise from `zIndex` issues with floating components rendered within the
     * context.
     *
     * @defaultValue undefined
     */
    autoRender?: boolean | 'start' | 'end';
    /**
     * An array of hooks that can be passed through to the `Remirror` component
     * and will be called in the order provided. Each hook receives no props but
     * will have access to the `RemirrorContext`.
     *
     * If you'd like access to more
     * state, you can wrap the `Remirror` component in a custom provider and
     * attach your state there. It can then be accessed inside the hook via
     * context.
     */
    hooks?: Array<() => void>;
}
/**
 * The default editor placeholder where the prosemirror editor will be rendered.
 */
export declare const EditorComponent: () => JSX.Element;
/**
 * [[`Remirror`]] is the component for putting the editor into into it's child
 * component.
 *
 * @remarks
 *
 * The main component for remirror. This acts both as a Provider of the remirror
 * context. All components rendered within `Remirror` have access to the
 * remirror context via `useRemirrorContext`.
 *
 * I can also be rendered as a standalone editor without children. In this case
 * the context can be accessed from outside the editor via
 * `useRemirror().getContext()`.
 */
export declare function Remirror<Extension extends AnyExtension = Remirror.Extensions>(props: RemirrorProps<Extension>): ReactElement<RemirrorProps<Extension>>;
