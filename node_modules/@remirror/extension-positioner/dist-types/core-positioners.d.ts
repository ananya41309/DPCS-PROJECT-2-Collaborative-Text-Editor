import { Coords, FindProsemirrorNodeResult, GetMarkRange, MarkType } from '@remirror/core';
import { Positioner, PositionerPosition } from './positioner';
export declare const defaultAbsolutePosition: PositionerPosition;
/**
 * Creates a positioner for the current block node.
 *
 * It spans the full width and height of the block.
 */
export declare const blockNodePositioner: Positioner<FindProsemirrorNodeResult>;
/**
 * Creates a positioner for the visible portion editor.
 *
 * E.g. The "viewport" of the editor inside any scrollable area.
 */
export declare const editorPositioner: Positioner<boolean>;
/**
 * Returns the block node position only when it is empty and the selection is
 * empty.
 */
export declare const emptyBlockNodePositioner: Positioner<FindProsemirrorNodeResult>;
/**
 * Returns the position as a single pixel width for the start of the block node
 * as a position
 */
export declare const emptyBlockNodeStartPositioner: Positioner<FindProsemirrorNodeResult>;
/**
 * Returns the position as a single pixel width for the end of the current block
 * node.
 */
export declare const emptyBlockNodeEndPositioner: Positioner<FindProsemirrorNodeResult>;
/**
 * Create a position that fully capture the selected text. When the selection
 * spans multiple lines, the position is created as a box that fully captures
 * the start cursor and end cursor.
 */
export declare const selectionPositioner: Positioner<{
    from: Coords;
    to: Coords;
}>;
/**
 * This can be used to position a menu that is inline with the first character
 * of the selection. This is useful for suggestions since they should typically
 * appear while typing without a multi character selection.
 *
 * @remarks
 *
 * The menu will center itself within the selection.
 *
 * - `right` should be used to absolutely position away from the right hand edge
 *   of the screen.
 * - `left` should be used to absolutely position away from the left hand edge
 *   of the screen.
 * - `bottom` absolutely positions the element above the text selection.
 * - `top` absolutely positions the element below the text selection
 */
export declare const cursorPositioner: Positioner<{
    from: Coords;
    to: Coords;
}>;
/**
 * Always render a position regardless of selection.
 */
export declare const alwaysPositioner: Positioner<{
    from: Coords;
    to: Coords;
}>;
/**
 * Creates a position which captures the current active word. Nothing is returned
 * if no word is active.
 *
 * This is only active when the selection is empty (cursor selection)
 *
 * @remarks
 *
 * Creates a rect that wraps the nearest word.
 */
export declare const nearestWordPositioner: Positioner<{
    from: Coords;
    to: Coords;
}>;
export interface MarkPositionerProps {
    /**
     * The `type` of mark to look for.
     */
    type: MarkType | string;
    /**
     * When true will find all marks of the provided type in the doc.
     *
     * @defaultValue false
     */
    all?: boolean;
    /**
     * When true will only be active for the visible positions.
     *
     * @defaultValue false
     */
    onlyVisible?: boolean;
}
export interface VisibleProps {
    visible: boolean;
}
interface CreateMarkPositionerData extends GetMarkRange, VisibleProps {
    cursor: {
        from: Coords;
        to: Coords;
    };
}
/**
 * Create a positioner for the currently selected mark
 */
export declare function createMarkPositioner(props: MarkPositionerProps): Positioner<CreateMarkPositionerData>;
export declare const positioners: {
    /**
     * Creates a rect which wraps the current selection.
     */
    selection: Positioner<{
        from: Coords;
        to: Coords;
    }>;
    /**
     * Creates a rect for the cursor. Is inactive for
     */
    cursor: Positioner<{
        from: Coords;
        to: Coords;
    }>;
    /**
     * Creates a positioner which always shows the position of the selection whether empty or not.
     */
    always: Positioner<{
        from: Coords;
        to: Coords;
    }>;
    /**
     * Creates a position which wraps the entire selected block node.
     */
    block: Positioner<FindProsemirrorNodeResult>;
    /**
     * Creates a position which wraps the entire selected block node. This is only active when the block node is empty.
     */
    emptyBlock: Positioner<FindProsemirrorNodeResult>;
    /**
     * Creates a position which wraps the entire selected block node. This is only active when the block node is empty.
     */
    emptyBlockStart: Positioner<FindProsemirrorNodeResult>;
    /**
     * Creates a position which wraps the entire selected block node. This is only active when the block node is empty.
     */
    emptyBlockEnd: Positioner<FindProsemirrorNodeResult>;
    /**
     * Create a rect which surrounds the nearest word.
     */
    nearestWord: Positioner<{
        from: Coords;
        to: Coords;
    }>;
    /**
     * Create a rect which surrounds the visible portion of the editor.
     */
    editor: Positioner<boolean>;
};
export {};
