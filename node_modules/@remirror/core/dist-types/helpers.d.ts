import { ErrorConstant } from '@remirror/core-constants';
import type { GetFixedDynamic, GetPartialDynamic, ValidOptions } from '@remirror/core-types';
import type { GetChangeOptionsReturn } from './types';
export interface GetChangedOptionsProps<Options extends ValidOptions> {
    /**
     * The previous readonly properties object.
     */
    previousOptions: GetFixedDynamic<Options>;
    /**
     * The partial update object that was passed through.
     */
    update: GetPartialDynamic<Options>;
    /**
     * A method to check whether two values are equal.
     */
    equals?: (valueA: unknown, valueB: unknown) => boolean;
}
/**
 * Get the property changes and the next value from an update.
 */
export declare function getChangedOptions<Options extends ValidOptions>(props: GetChangedOptionsProps<Options>): GetChangeOptionsReturn<Options>;
export interface IsNameUniqueProps {
    /**
     * The name to check against
     */
    name: string;
    /**
     * The set to check within
     */
    set: Set<string>;
    /**
     * The error code to use
     *
     * @defaultValue 'extension'
     */
    code: ErrorConstant.DUPLICATE_HELPER_NAMES | ErrorConstant.DUPLICATE_COMMAND_NAMES;
}
/**
 * Checks whether a given string is unique to the set. Add the name if it
 * doesn't already exist, or throw an error when `shouldThrow` is true.
 *
 * @param props - destructured params
 */
export declare function throwIfNameNotUnique(props: IsNameUniqueProps): void;
