import type { RemirrorMessage } from '@remirror/core-types';
interface BaseKeyboardSymbol {
    /**
     * The normalized value for the symbol.
     */
    key: string;
}
interface I18nKeyboardSymbol extends BaseKeyboardSymbol {
    /**
     * The internationalized representation of the key.
     */
    i18n: RemirrorMessage;
}
interface ModifierKeyboardSymbol extends I18nKeyboardSymbol {
    /**
     * Modifier keys like 'shift' | 'alt' | 'meta'.
     */
    type: 'modifier';
    /**
     * The symbol for the modifier key.
     */
    symbol: string;
}
interface NamedKeyboardSymbol extends I18nKeyboardSymbol {
    /**
     * Named keys like `Enter` | `Escape`
     */
    type: 'named';
    /**
     * The potentially undefined symbol for the named key.
     */
    symbol?: string;
}
interface CharKeyboardSymbol extends BaseKeyboardSymbol {
    /**
     * Character keys like `a` | `b`
     */
    type: 'char';
}
type KeyboardSymbol = ModifierKeyboardSymbol | NamedKeyboardSymbol | CharKeyboardSymbol;
/**
 * Convert a keyboard shortcut into symbols which and keys.
 */
export declare function getShortcutSymbols(shortcut: string): KeyboardSymbol[];
export {};
